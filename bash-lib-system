#!/bin/bash
#
# Bash system library
#
# Currently supports: 
#    Ubuntu
#    CentOS (Redhat)
# 

__initSystemLibrary()
{
	(( ${__SYSTEM_LIB_INITIALIZED__} )) && return
	readonly __SYSTEM_LIB_INITIALIZED__=1

	local _OS_TYPE=""
	local _LINUX_DISTRO="" 
	local _PKG_MANAGER=""
	local _PKG_INSTALL_CMD=""
	local _PKG_REINSTALL_CMD=""
	local _PKG_UPDATE_CMD=""
	local _PKG_UNINSTALL_CMD="" 
	local _PKG_LOCK_MANAGER=""
	local _PKG_VERSION_LOCK_CMD=""
	local _PKG_VERSION_UNLOCK_CMD=""

	case "${OSTYPE}" in
		linux*)
			_OS_TYPE="linux"
			;;
		solaris*)
			_OS_TYPE="solaris"
			;;
		darwin*)
			_OS_TYPE="darwin"
			;;
		*)
			_OS_TYPE="${OSTYPE}"
			;;
	esac 
	_LINUX_DISTRO=$(hostnamectl | grep "Operating System" | awk '{print $3}')
	if (( $? )); then
		_LINUX_DISTRO=$(cat /etc/os-release | grep "^NAME" | sed -e 's/"//g' -e 's/NAME=//' | awk '{print $1}')
		if (( $? )); then
			_LINUX_DISTRO=$(cat /etc/lsb-release | grep "DISTRIB_ID" | sed -e 's/DISTRIB_ID=//')
			if (( $? )); then
				_LINUX_DISTRO=$(cat /etc/redhat-release | grep "^NAME" | sed -e 's/"//g' -e 's/NAME=//' | awk '{print $1}')
			fi 
		fi 
	fi 
	_LINUX_DISTRO="${_LINUX_DISTRO,,}"
	case "${_LINUX_DISTRO}" in
		ubuntu)
			_PKG_MANAGER="apt-get"
			_PKG_INSTALL_CMD="apt-get install -y"
			_PKG_REINSTALL_CMD="apt-get reinstall -y"
			_PKG_UPDATE_CMD="apt-get update; apt-get upgrade -y"
			_PKG_UNINSTALL_CMD="apt-get purge -y"
			_PKG_LOCK_MANAGER="apt-mark"
			_PKG_VERSION_LOCK_CMD="apt-mark hold"
			_PKG_VERSION_UNLOCK_CMD="apt-mark unhold"
			;;
		centos|redhat)
			_PKG_MANAGER="yum"
			_PKG_INSTALL_CMD="yum install -y"
			_PKG_REINSTALL_CMD="yum reinstall -y"
			_PKG_UPDATE_CMD="yum update -y"
			_PKG_UNINSTALL_CMD="yum erase -y"
			_PKG_LOCK_MANAGER="yum"
			_PKG_VERSION_LOCK_CMD="yum versionlock add"
			_PKG_VERSION_UNLOCK_CMD="yum versionlock delete"
			;; 
	esac
	readonly OS_TYPE="${_OS_TYPE}"
	readonly LINUX_DISTRO="${_LINUX_DISTRO}"
	readonly PKG_MANAGER="${_PKG_MANAGER}" 
	readonly PKG_INSTALL_CMD="${_PKG_INSTALL_CMD}"
	readonly PKG_REINSTALL_CMD="${_PKG_REINSTALL_CMD}"
	readonly PKG_UPDATE_CMD="${_PKG_UPDATE_CMD}"
	readonly PKG_UNINSTALL_CMD="${_PKG_UNINSTALL_CMD}"
	readonly PKG_LOCK_MANAGER="${_PKG_LOCK_MANAGER}"
	readonly PKG_VERSION_LOCK_CMD="${_PKG_VERSION_LOCK_CMD}"
	readonly PKG_VERSION_UNLOCK_CMD="${_PKG_VERSION_UNLOCK_CMD}"

}

getOSType()
{
	echo "${OS_TYPE}"
}

getDistroType()
{
	echo "${LINUX_DISTRO}"
} 


packageManager_install()
{
	${PKG_INSTALL_CMD} ${@} > /dev/null 2>&1
	if (( $? )); then
		echo 0
	else
		echo 1
	fi
}

packageManager_reinstall()
{
	${PKG_REINSTALL_CMD} ${@} > /dev/null 2>&1
	if (( $? )); then
		echo 0
	else
		echo 1
	fi
}

packageManager_update()
{
	${PKG_UPDATE_CMD} ${@} > /dev/null 2>&1
	if (( $? )); then
		echo 0
	else
		echo 1
	fi
}

packageManager_uninstall()
{
	${PKG_UNINSTALL_CMD} ${@} > /dev/null 2>&1
	if (( $? )); then
		echo 0
	else
		echo 1
	fi
}

packageManager_lockVersion()
{
	${PKG_VERSION_LOCK_CMD} ${@} > /dev/null 2>&1
	if (( $? )); then
		echo 0
	else
		echo 1
	fi
}

packageManager_unlockVersion()
{
	${PKG_VERSION_UNLOCK_CMD} ${@} > /dev/null 2>&1
	if (( $? )); then
		echo 0
	else
		echo 1
	fi
}

isSwapEnabled()
{
	if (( $(swapon --show | wc -l) > 1 )); then
		echo 1
	else
		echo 0
	fi
}

disableSwap()
{
	if (( $(isSwapEnabled) )); then
		if (( $(swapoff -a) )); then
			echo 0
		else
			if (( $(sed -i '/swap/s/^/#/' /etc/fstab) )); then
				echo 0
			else
				echo 1
			fi
		fi
	else
		echo 1
        fi 
}

mountIso()
{
	local isoFile=${1}
	local mountPoint=${2}
	if [ -z "${isoFile}" ]; then
		abort "ISO file name not provide."
	fi
	if [ ! -f "${isoFile}" ]; then
		abort "ISO file [${isoFile}] doesn't exist."
	fi
	if [ -z "${mountPoint}" ]; then
		abort "Mount point name not provide."
	fi
	if [ ! -d "${mountPoint}" ]; then
		abort "Mount point [${mountPoint}] doesn't exist."
	fi
	SUDO mount -v -t iso9660 -o loop ${isoFile} ${mountPoint} > /dev/null 2>&1
	if (( $? )); then
		abort "Failed to mount [${isoFile}] to mount point [${mountPoint}]"
	fi
}

isMounted()
{
	local mountPoint=${1}
	if [ -z "${mountPoint}" ]; then
		abort "Mount point name not provide."
	fi
	if (( $(mountpoint -q ${mountPoint}) )); then
		echo 0
	else
		echo 1
	fi 
}

unmount()
{
	local mountPoint=${1}
	if [ -z "${mountPoint}" ]; then
		abort "Mount point name not provide."
	fi
	if (( ! $(mountpoint -q ${mountPoint}; echo $?) )); then
		${SUDO} umount ${mountPoint} > /dev/null 2>&1
		if (( $? )); then
			abort "Failed to unmount mount point [${mountPoint}]"
		fi
	fi
} 

__initSystemLibrary

#::END::
