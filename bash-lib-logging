#!/bin/bash
#
# Bash logging library
#

__initLoggingLibrary()
{
    if (( ${LOGGING_LIBRARY_INITIALIZED} )); then
        return
    fi

    LOGGING_LIBRARY_INITIALIZED=1

    readonly DEFAULT_LOG_DIR="${pwd}"
    readonly DEFAULT_LOG_FILE_NAME="app.log"
    readonly DEFAULT_LOG_TAG="APP-LOG"

    LOG_DIR="${DEFAULT_LOG_DIR}"
    LOG_FILE_NAME="${DEFAULT_LOG_FILE_NAME}"
    LOG_FILE="${LOG_DIR}/{${LOG_FILE_NAME}"
    LOG_TAG="${DEFAULT_LOG_TAG}"

    LOGGING_ENABLED=0
    LOGGING_BACKUP=0
}

setLogDirectory()
{
    LOG_DIR=${1:-${LOG_DIR}}
    LOG_FILE="${LOG_DIR}/{${LOG_FILE_NAME}"
}

setLogFileName()
{
    LOG_FILE_NAME=${1:-${LOG_FILE_NAME}}
    LOG_FILE="${LOG_DIR}/{${LOG_FILE_NAME}"
}

setLogTag()
{
    LOG_TAG=$1
}

enableLogging()
{
    LOGGING_ENABLED=1
}

disableLogging()
{
    LOGGING_ENABLED=0
}

enableLogBackup()
{
    LOGGING_BACKUP=1
}

disableLogBackup()
{
   LOGGING_BACKUP=0 
}

newLogFile()
{
    if [ -f "${LOG_FILE}" ]; then
        if (( ${LOGGING_ENABLED} )) && (( ${LOGGING_BACKUP} )); then
            local backupLogFile="${LOG_FILE}-$(ls --full-time ${LOG_FILE} | awk '{ print $6"_"$7 }' | sed 's/[.].*$//')"
            if (( $(cp ${LOG_FILE} ${backupLogFile} 2>&1; echo $?) )); then
                echo "WARN: Failed to create backup of the previous log file"
            fi
        fi
    fi
    if (( $(cat /dev/null > ${LOG_FILE} 2&1; echo $?) )); then
        echo "Failed to create/clear the log file [${LOG_FILE}]"
        echo "Exiting..."
        exit 1
    fi
}

log()
{
    if (( LOGGING_ENABLED )); then
        echo -e "${1}" | tee -a ${LOG_FILE}
    else
        echo -e "${1}" 
    fi
}

logPipe()
{
    while read message; do
        log "${message}"
    done
}

abort()
{
    local msg=${1}
    local exitCode=${2:-1} 
    log "${1}"
    log "Aborting..."
    exit ${exitCode}
}

__initLoggingLibrary

#::END::
