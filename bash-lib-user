#!/bin/bash
#
#  User related functions
#
#  Dependency: bash-lib-logging
#

source lib/bash-lib-logging

__initUserLibrary()
{
	(( ${__USER_LIB_INITIALIZED__} )) && return
	readonly __USER_LIB_INITIALIZED__=1
}

getCurrentUser()
{
	echo "$(whoami)"
}

getCurrentUserGroup()
{
	echo "$(id -gn)"
}

SUDO()
{
	local _SUDO=""
	if [[ "$(whoami)" == "root" ]]; then
		_SUDO=""	
	else
		_SUDO="sudo "	
	fi
	${_SUDO} "${@}"
}

isUserExist()
{
        local user=$1
	local status
	if [ -z "${user}" ]; then
		abort "Use ID not provide."
	fi
        id -u ${user} > /dev/null 2>&1
        if (( $? )); then
                echo 0
        else
                echo 1
        fi
}

isValidUser()
{
	local _USER=$1
	if (( $(isUserExist "${_USER}") )); then
		echo 1
	else
		echo 0
	fi
}

getPassword()
{
    local prompt1=${1:-"Please enter password"}
    local prompt2=${2:-"Please re-enter password"}
    local retryMessage=${3:-"Passwords do not match. Retry (y/n)"}
    local password1 
    local password2
    local retry
    while : ; do
        read -sp "${prompt1}: " password1
		echo "" > /dev/tty
        read -sp "${prompt2}: " password2
		echo "" > /dev/tty
        if [ "${password1}" == "${password2}" ]; then
			echo ${password1}
			break
		else
			while : ; do
				read -p "${retryMessage}: " -n1 retry
				retry=${retry,,}
				if [ "${retry}" == "y" ]; then
					echo "" > /dev/tty
					break
				elif [ "${retry}" == "n" ]; then
					echo "" > /dev/tty
					return 1
				fi
				echo "" > /dev/tty
			done
        fi
    done
}

addUser()
{
	local _USER_ID=${1}
	local _PASSWORD=${2}
	if [ -z "${_USER_ID}" ]; then
		echo 0 
		return 1 # User ID not provided
	fi
	if [ -z "${_PASSWORD}" ]; then
		echo 0 
		return 2 # Password not provided
	fi
	if (( $(id -u ${_USER_ID} > /dev/null 2>&1; echo $?) )); then
		local encpw=$(openssl passwd -crypt ${_PASSWORD})
		if (( $? )); then
			echo 0 
			return 3 # Failed to encrypt password using openssl
		else
			if (( $(useradd -m -p ${encpw} ${_USER_ID}; echo $?) )); then
				echo 0 
				return 4 # Failed to add user
			else
				echo 1 
			fi
		fi
	else
		echo 1
		return 5 # user already exist."
	fi 
} 

getUserHome()
{
	local _USER_ID=${1}
	if [ -z "${_USER_ID}" ]; then
		abort "User ID is not provided"
	fi
	if (( ! $(isValidUser "${_USER_ID}") )); then
		abort "Invalid user id ${_USER_ID}"
	fi
	echo "$(getent passwd ${_USER_ID} | awk 'BEGIN {FS=":"}; {print $6}')" 
}

__initUserLibrary

#::END::

